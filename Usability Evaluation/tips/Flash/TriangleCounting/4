1. vertexMap
Function Signature:
template<class VTYPE, class F, class M>
inline VSet vertexMap(VSet &U, F &f, M &m, bool b = true);
template<class VTYPE, class F>
inline VSet vertexMap(VSet &U, F &f);
Parameters:
VSet &U: The set of vertices to be processed.
F &f: The function to apply to each vertex in the set.
M &m: (Optional) Additional mapping function to be applied locally.
bool b: (Optional) A flag to control additional behavior, default is true.
Usage Example:
DefineMapV(init) {
    v.id = id(v);
    v.deg = deg(v);
    v.count = 0;
    v.out.clear();
    return v;
};
vertexMap(All, CTrueV, init);
In this example, vertexMap applies the init function to all vertices, initializing their attributes.

2. edgeMapDenseFunction
Function Signature:
template<class VTYPE, class F, class M, class C, class H>
VSet edgeMapDenseFunction(Graph<VTYPE> &G, VSet &U, H h, F &f, M &m, C &c, bool b = true);
template<class VTYPE, class F, class M, class C>
VSet edgeMapDenseFunction(Graph<VTYPE> &G, VSet &U, int h, VSet &T, F &f, M &m, C &c, bool b = true);
Parameters:
Graph<VTYPE> &G: The graph on which the operation is performed.
VSet &U: The set of vertices to be processed.
H h: The type of edge handling (e.g., EU, ED, ER).
F &f: The function to apply to each edge.
M &m: The mapping function for the edge processing.
C &c: The condition to filter edges.
bool b: (Optional) A flag to control additional behavior, default is true.
Usage Example:
DefineFE(check) {
    return (s.deg > d.deg) || (s.deg == d.deg && s.id > d.id);
};
DefineMapE(update) {
    d.out.push_back(s.id);
    return d;
};
edgeMapDense(All, EU, check, update, CTrueV);
In this example, edgeMapDenseFunction applies the check function to filter edges and the update function to update the destination vertex.

3. edgeMapDense
Function Signature:
template<class VTYPE, class F, class M, class C>
VSet edgeMapDense(Graph<VTYPE> &G, VSet &U, int h, F &f, M &m, C &c, bool b = true);
Parameters:
Graph<VTYPE> &G: The graph on which the operation is performed.
VSet &U: The set of vertices to be processed.
int h: The type of edge handling (e.g., EU, ED, ER).
F &f: The function to apply to each edge.
M &m: The mapping function for the edge processing.
C &c: The condition to filter edges.
bool b: (Optional) A flag to control additional behavior, default is true.
Usage Example:
DefineMapE(update2) {
    d.count += set_intersect(s.out, d.out, res);
};
edgeMapDense(All, EU, check, update2, CTrueV, false);
In this example, edgeMapDense is used to apply the update2 function on the edges, updating the count attribute based on the intersection of outgoing edges.

4. Sum
Function Signature:
template<class T>
T Sum(T &t);
Parameters:
T &t: The variable to sum up across all processes in the context of parallel execution.
Usage Example:
long long cnt = 0;
DefineMapV(count) { cnt += v.count; };
vertexMap(All, CTrueV, count);
long long cnt_all = Sum(cnt);
In this example, Sum is used to aggregate the cnt value across all processes to get the total count cnt_all.

Below is the pseudocode:
Algorithm: Graph Processing with Vertex and Edge Mappings

Define function INIT(v):

v.id = id(v)
v.deg = deg(v)
v.count = 0
v.out.clear()
return v
Define function CHECK(s, d):

return (s.deg > d.deg) or (s.deg == d.deg and s.id > d.id)
Define function UPDATE(s, d):

d.out.push_back(s.id)
return d
Define function UPDATE2(s, d, res):

d.count += set_intersect(s.out, d.out, res)
return d
Initialize dataset using SetDataset

SetDataset(argv[1], argv[2])
Initialize all vertices using vertexMap

U = vertexMap(All, CTrueV, INIT)
Apply edgeMapDense to update edges using CHECK and UPDATE

U = edgeMapDense(All, EU, CHECK, UPDATE, CTrueV)
Apply edgeMapDense to update edges using CHECK and UPDATE2

U = edgeMapDense(All, EU, CHECK, UPDATE2, CTrueV, false)
Initialize cnt and cnt_all

cnt = 0
cnt_all = 0
Define function COUNT(v):

cnt += v.count
Apply vertexMap to count triangles

vertexMap(All, CTrueV, COUNT)
Sum the total count across all vertices

cnt_all = Sum(cnt)
Measure processing time

processing_time = GetTime()
Print results

Print "number of triangles =", cnt_all
Print "total time =", processing_time