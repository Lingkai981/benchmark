Main Functions and Analysis
vertexMap

Declaration:

template<class VTYPE, class F, class M>
inline VSet vertexMap(VSet &U, F &f, M &m, bool b = true);
Parameters:
VSet &U: A set of vertices to be processed.
F &f: A function to be applied to each vertex.
M &m: A mapping function to transform the vertex set.
bool b: A boolean flag indicating whether to perform the local mapping (default is true).
Description:
This function applies a filter function f to the vertex set U and then applies a mapping function m locally to the filtered set. If b is true, the local mapping is performed; otherwise, a different variant is used.
Example:

DefineMapV(init) {v.c = id(v); v.cc = -1; v.s.clear(); return v;};
vertexSubset A = vertexMap(All, CTrueV, init);
edgeMapDenseFunction

Declaration:

template<class VTYPE, class F, class M, class C, class H>
VSet edgeMapDenseFunction(Graph<VTYPE> &G, VSet &U, H h, VSet &T, F &f, M &m, C &c, bool b = true);
Parameters:
Graph<VTYPE> &G: The graph on which the edge map is performed.
VSet &U: A set of vertices to be processed.
H &h: A function defining how edges are handled.
VSet &T: A set of vertices to pull from.
F &f: A function to be applied to each edge.
M &m: A mapping function for edge transformation.
C &c: A filter function for the edge processing.
bool b: A boolean flag indicating whether to perform the local mapping (default is true).
Description:
This function processes edges in a dense manner, applying the filter function c and the mapping function m to each edge. Depending on the flag b, the mapping may be performed differently.
Example:

DefineMapE(update) {d.s.push_back(s.c);};
A = edgeMapDense(All, EU, CTrueE, update, CTrueV);
DefineMapV

Macro Definition:

#define DefineMapV(name) auto name = [](auto &v) -> auto
Description:
This macro defines a lambda function name that operates on a vertex v. The lambda function can modify the properties of the vertex and returns the modified vertex.
Example:

DefineMapV(init) {v.c = id(v); v.cc = -1; v.s.clear(); return v;};
DefineMapE

Macro Definition:

#define DefineMapE(name) auto name = [](auto &s, auto &d) -> void
Description:
This macro defines a lambda function name that operates on the source vertex s and destination vertex d of an edge. The lambda function can modify the properties of the destination vertex.
Example:

DefineMapE(update) {d.s.push_back(s.c);};
DefineFV

Macro Definition:

#define DefineFV(name) auto name = [](auto &v) -> bool
Description:
This macro defines a lambda function name that operates on a vertex v and returns a boolean value. The lambda function is used as a filter to decide whether a vertex should be included in the result set.
Example:
DefineFV(filter) {return v.cc != v.c;};
Example Usage in Main Function
Initialization:

DefineMapV(init) {v.c = id(v); v.cc = -1; v.s.clear(); return v;};
vertexSubset A = vertexMap(All, CTrueV, init);
Edge Mapping:

DefineMapE(update) {d.s.push_back(s.c);};
A = edgeMapDense(All, EU, CTrueE, update, CTrueV);
Vertex Processing:

DefineMapV(local1) {
    int max_cnt = 0;
    for (auto &i:v.s) {
        cnt[i]++;
        if (cnt[i] > max_cnt) {
            max_cnt = cnt[i];
            v.cc = i;
        }
    }
    v.s.clear();
    return v;
};
A = vertexMap(All, CTrueV, local1);
Filtering Vertices:

DefineFV(filter) {return v.cc != v.c;};
DefineMapV(local2) {v.c = v.cc;};
A = vertexMap(All, filter, local2);
These examples illustrate the usage of vertexMap, edgeMapDenseFunction, and the DefineMapV, DefineMapE, and DefineFV macros to manipulate vertex and edge sets in a graph processing context.
Below is the pseudocode:
Algorithm: Graph Processing with Vertex and Edge Mappings

1: function INIT(v):

v.c = id(v)
v.cc = -1
v.s.clear()
return v
2: function UPDATE(s, d):

d.s.push_back(s.c)
3: function LOCAL1(v):

max_cnt = 0
cnt = array of size n_vertex initialized to 0
for each i in v.s:
cnt[i] += 1
if cnt[i] > max_cnt:
max_cnt = cnt[i]
v.cc = i
v.s.clear()
return v
4: function FILTER(v):

return v.cc != v.c
5: function LOCAL2(v):

v.c = v.cc
6: Initialize dataset using SetDataset with argv[1] and argv[2]

7: Initialize all vertices using vertexMap

A = VERTEXMAP(All, CTrueV, INIT)
8: Repeat for 100 iterations or until size of A is 0:

Print the current round number and size of A
Apply edgeMapDense to update edges using UPDATE
A = EDGEMAPDENSE(All, EU, CTrueE, UPDATE, CTrueV)
Apply vertexMap to process vertices using LOCAL1
A = VERTEXMAP(All, CTrueV, LOCAL1)
Apply vertexMap to filter and update vertices using FILTER and LOCAL2
A = VERTEXMAP(All, FILTER, LOCAL2)
9: Measure total processing time

total_time = GetTime()
10: Print total processing time

Print total_time