Main Functions and Analysis
1. VertexMap
The VertexMap function applies a given function to a set of vertices. It can filter and map vertices based on the provided function.

Parameters:
VSet &U: The set of vertices to be processed.
F &f: The filter function to select specific vertices.
M &m: The map function to apply to the selected vertices.
bool b: An optional boolean flag to control additional behavior (default is true).
Example:

DefineMapV(init_v) { v.dis = (id == source) ? 0 : -1; };
vset_t a = All;
a = VertexMap(a, CTrueV, init_v);
This example initializes the distance of vertices, setting the source vertex's distance to 0 and others to -1.

2. EdgeMap
The EdgeMap function applies a given function to a set of edges. It can handle dense and sparse cases based on the size of the vertex set.

Parameters:
Graph<VTYPE> &G: The graph containing the edges.
VSet &U: The set of vertices to be processed.
H h: The direction of edge processing (EU, ED, ER).
F &f: The filter function to select specific edges.
M &m: The map function to apply to the selected edges.
C &c: The condition function to check additional conditions on edges.
R &r: The reduce function to aggregate results.
bool b: An optional boolean flag to control additional behavior (default is true).
Example:

DefineFE(check) { return (d.dis < -0.5 || d.dis > s.dis + weight); };
DefineMapE(update) {
  if (d.dis < -0.5 || d.dis > s.dis + weight)
    d.dis = s.dis + weight;
};
DefineMapE(reduce) {
  if (d.dis < -0.5 || d.dis > s.dis)
    d.dis = s.dis;
};

for (int len = VSize(a), i = 1; len > 0; len = VSize(a), ++i) {
  LOG(INFO) << "Round " << i << ": size=" << len << std::endl;
  a = EdgeMap(a, ED, check, update, CTrueV, reduce);
}
This example defines functions to check and update the shortest path distances and iteratively applies these functions using EdgeMap.

3. DefineMapV and DefineMapE
These macros are used to define vertex and edge map functions inline.

Example:

DefineMapV(init_v) { v.dis = (id == source) ? 0 : -1; };
DefineFE(check) { return (d.dis < -0.5 || d.dis > s.dis + weight); };
DefineMapE(update) {
  if (d.dis < -0.5 || d.dis > s.dis + weight)
    d.dis = s.dis + weight;
};
DefineMapE(reduce) {
  if (d.dis < -0.5 || d.dis > s.dis)
    d.dis = s.dis;
};
These macros define the initial vertex distance setting, the condition to check edge weights, and the functions to update and reduce distances.

4. VSet and Graph
VSet and Graph are data structures representing sets of vertices and the graph, respectively.

Example:

vset_t a = All;
a = VertexMap(a, CTrueV, init_v);
Graph<vertex_t> graph;
This example shows the initialization of a vertex set a and a graph.

Summary
VertexMap is used for applying functions to vertex sets.
EdgeMap is used for applying functions to edge sets.
DefineMapV and DefineMapE are macros for defining vertex and edge functions.
VSet and Graph are core data structures representing vertices and the graph.