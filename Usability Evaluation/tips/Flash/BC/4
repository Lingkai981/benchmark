Main Functions and Analysis
1. vertexMap
Function Prototype:

template<class VTYPE, class F, class M>
inline VSet vertexMap(VSet &U, F &f, M &m, bool b = true);
Parameters:

U: A VSet representing the set of vertices.
F: A function applied to each vertex.
M: A mapping function to apply.
b: A boolean flag (default true).
Usage Example:
VSet initialSet = vertexMap(vertices, init, local);
This example applies the init function to initialize the vertices and then the local function to set the local values.

2. edgeMapDenseFunction
Function Prototype:

template<class VTYPE, class F, class M, class C, class H>
VSet edgeMapDenseFunction(Graph<VTYPE> &G, VSet &U, H h, VSet &T, F &f, M &m, C &c, bool b = true);
Parameters:

G: A Graph object.
U: A VSet representing the set of vertices.
H: A condition for edge traversal.
T: A target vertex set.
F: A function to apply to each edge.
M: A mapping function for edge updates.
C: A condition function.
b: A boolean flag (default true).
Usage Example:
VSet updatedSet = edgeMapDenseFunction(graph, vertices, ED, targets, update1, local, condition);
This example uses the update1 function to update edges and applies the local function while considering the condition defined by condition.

3. edgeMapSparseFunction
Function Prototype:

template<class VTYPE, class F, class M, class C, class R>
VSet edgeMapSparseFunction(Graph<VTYPE> &G, VSet &U, int h, F &f, M &m, C &c, R &r);
Parameters:

G: A Graph object.
U: A VSet representing the set of vertices.
H: A condition for edge traversal.
F: A function to apply to each edge.
M: A mapping function for edge updates.
C: A condition function.
R: A reduction function.
Usage Example:
VSet resultSet = edgeMapSparseFunction(graph, vertices, ED, update2, local, condition, reduce);
This example uses the update2 function to update edges and applies the local function while considering the condition defined by condition and then reduces using reduce.

4. edgeMapFunction
Function Prototype:
template<class VTYPE, class F, class M, class C, class R, class H>
VSet edgeMapFunction(Graph<VTYPE> &G, VSet &U, H h, F &f, M &m, C &c, R &r);
Parameters:

G: A Graph object.
U: A VSet representing the set of vertices.
H: A condition for edge traversal.
F: A function to apply to each edge.
M: A mapping function for edge updates.
C: A condition function.
R: A reduction function.
Usage Example:
VSet finalSet = edgeMapFunction(graph, vertices, ED, update1, local, condition, reduce);
This example uses the update1 function to update edges, applies the local function while considering the condition defined by condition, and reduces using reduce.

5. vertexMap (Overloaded)
Function Prototype:

template<class VTYPE, class F>
inline VSet vertexMap(VSet &U, F &f);
Parameters:

U: A VSet representing the set of vertices.
F: A function applied to each vertex.
Usage Example:

VSet filteredSet = vertexMap(vertices, filter);
This example applies the filter function to the set of vertices.

Below is the pseudocode:
Algorithm: Graph Processing with Vertex and Edge Mappings

1: function INIT(v, s):

if id(v) == s then
v.d = 0
v.c = 1
v.b = 0
else
v.d = -1
v.c = 0
v.b = 0
return v
2: function FILTER(v, s):

return id(v) == s
3: function UPDATE1(s, d):

d.c += s.c
4: function COND(v):

return v.d == -1
5: function REDUCE1(s, d):

d.c += s.c
return d
6: function LOCAL(v, curLevel):

v.d = curLevel
7: function CHECK2(s, d):

return d.d == s.d - 1
8: function UPDATE2(s, d):

d.b += d.c / s.c * (1 + s.b)
return d
9: function REDUCE2(s, d):

d.b += s.b
return d
10: function BN(S, h):
- curLevel = h
- sz = Size(S)
- if sz == 0 then
- return
- else
- print("size = %d\n", sz)
- T = edgeMap(S, ED, CTrueE, UPDATE1, COND, REDUCE1)
- T = vertexMap(T, CTrueV, LOCAL)
- BN(T, h + 1)
- print("-size = %d\n", sz)
- curLevel = h
- edgeMap(T, EjoinV(ER, S), CHECK2, UPDATE2, CTrueV, REDUCE2)

11: function MAIN(argc, argv):
- Initialize vertex types
- Set dataset using SetDataset(argv[1], argv[2])
- s = atoi(argv[3])
- Initialize vertices
- S = vertexMap(All, CTrueV, INIT)
- Filter vertices
- S = vertexMap(S, FILTER)

- Execute BN function
- BN(S, 1)

- Measure and print total processing time
- print("total time = %0.3lf secs\n", GetTime())
12: Call MAIN function with command line arguments


