Here is the detailed information about the main API functions used in the given implementation, including parameter descriptions and usage examples.

1. edgeMap
Description:
edgeMap is a core test function used for applying a function to the edges of a graph. It is typically used for algorithms like PageRank, BFS, and others where operations are performed on the edges.

Parameters:

graph<vertex>& GA: The graph on which to operate.
vertexSubset& vs: The subset of vertices to be considered as the frontier.
F f: The function to be applied to the edges. This function should have update, updateAtomic, and cond methods.
intT threshold = -1: A threshold value used to decide between dense and sparse edge traversal.
const flags& fl = 0: Flags to control the behavior of the edge map.
Usage Example:

edgeMap(GA, Frontier, PR_F<vertex>(p_curr, p_next, GA.V), 0, no_output);
In this example, PR_F is used to apply the PageRank update function to the edges of the graph GA.

2. vertexMap
Description:
vertexMap applies a function to each vertex in the vertex subset. It can be used to update the values of vertices based on some computation.

Parameters:

VS& V: The vertex subset on which to operate.
F f: The function to be applied to each vertex. This function should have an operator() method.
Usage Example:

vertexMap(Frontier, PR_Vertex_F(p_curr, p_next, damping, n));
Here, PR_Vertex_F updates the p_next values of the vertices according to the PageRank equation.

3. sequence::plusReduce
Description:
plusReduce is a utility function used to perform a parallel reduction (sum) of an array.

Parameters:

A a: The array to be reduced.
long n: The size of the array.
Usage Example:

double L1_norm = sequence::plusReduce(p_curr, n);
This computes the L1-norm by summing up the values in the p_curr array.

4. parallel_for
Description:
parallel_for is used to run a loop in parallel. It is a utility function to parallelize loops.

Parameters:

long start: The starting index of the loop.
long end: The ending index of the loop.
F f: The function to be applied in each iteration of the loop.
Usage Example:

parallel_for(long i = 0; i < n; i++) {
  p_curr[i] = one_over_n;
}
This initializes the p_curr array in parallel.

PR_F
Description:
A functor that defines the update function for PageRank.

Parameters:

double* p_curr: The current PageRank values.
double* p_next: The next PageRank values.
vertex* V: The vertices of the graph.
Methods:

inline bool update(uintE s, uintE d): Applies the PageRank equation.
inline bool updateAtomic(uintE s, uintE d): Atomic version of the update function.
inline bool cond(intT d): Condition function always returning true.
PR_Vertex_F
Description:
A functor that updates the PageRank values of vertices according to the PageRank equation.

Parameters:

double damping: The damping factor.
double addedConstant: A constant added to each PageRank value.
double* p_curr: The current PageRank values.
double* p_next: The next PageRank values.
Methods:

inline bool operator()(uintE i): Applies the PageRank update to a vertex.
PR_Vertex_Reset
Description:
A functor that resets the PageRank values to zero.

Parameters:

double* p_curr: The current PageRank values.
Methods:

inline bool operator()(uintE i): Resets the PageRank value of a vertex to zero.

Below is the pseudocode:
1: function INIT(v):
   - v.val = 1.0 / n_vertex
   - v.next = 0.0
   - return v

2: function UPDATE(s, d):
   - d.next += s.val / s.deg
   - return d

3: function LOCAL(v):
   - v.val = 0.85 * v.next + 0.15 / n_vertex
   - v.next = 0
   - return v

4: function RESET(v):
   - v.val = 0.0
   - return v

5: Initialize p_curr for all vertices:
   - p_curr = vertexMap(All, INIT)

6: Initialize p_next to 0 for all vertices:
   - p_next = vertexMap(All, RESET)

7: Initialize frontier to all vertices:
   - frontier = All

8: function COMPUTE(graph, maxIters):
   - iter = 0
   - while iter < maxIters:
     - edgeMap(graph, frontier, UPDATE)
     - vertexMap(frontier, LOCAL)
     - Calculate L1_norm:
       - L1_norm = sum(|p_curr[i] - p_next[i]| for i in vertices)
     - if L1_norm < epsilon:
       - break
     - Reset p_curr:
       - vertexMap(frontier, RESET)
     - Swap p_curr and p_next
     - iter += 1
   - return p_curr

9: Initialize parameters:
   - maxIters = 100
   - damping = 0.85
   - epsilon = 0.0000001

10: Compute PageRank:
   - result = COMPUTE(graph, maxIters)

11: Clean up:
   - free allocated memory for p_curr and p_next
