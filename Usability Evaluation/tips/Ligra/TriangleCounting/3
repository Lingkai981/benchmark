Here is a detailed explanation of the main API functions used in the provided code, including parameter descriptions and usage examples:

API Functions and Their Usage
vertexMap

Description: Applies a function to each vertex in the given vertex subset.
Parameters:
VS& V: The vertex subset.
F f: The function to apply to each vertex.
Example:

struct initF {
    vertex* V;
    long* counts;
    initF(vertex* _V, long* _counts) : V(_V), counts(_counts) {}
    inline bool operator () (uintE i) {
        counts[i] = 0;
        quickSort(V[i].getOutNeighbors(), V[i].getOutDegree(), intLT());
        return 1;
    }
};
vertexMap(Frontier, initF(GA.V, counts));
This initializes the counts array and sorts the neighbors of each vertex.
edgeMap

Description: Applies a function to the edges in the given graph and vertex subset, optionally using a threshold to decide between sparse and dense processing.
Parameters:
graph<vertex>& GA: The input graph.
VS& vs: The vertex subset.
F f: The function to apply to each edge.
intT threshold: The threshold for choosing between sparse and dense processing.
const flags& fl: Flags to control the behavior of the edge map.
Example:

struct countF {
    vertex* V;
    long* counts;
    countF(vertex* _V, long* _counts) : V(_V), counts(_counts) {}
    inline bool update (uintE s, uintE d) {
        if(s > d)
            writeAdd(&counts[s], countCommon<vertex>(V[s], V[d], s, d));
        return 1;
    }
    inline bool cond (uintE d) { return true; }
};
edgeMap(GA, Frontier, countF(GA.V, counts), -1, no_output);
This function counts the triangles by updating the counts array.
vertexSubset

Description: Represents a subset of vertices in a graph.
Constructors:
vertexSubset(size_t n, size_t m, bool* frontier): Constructs a vertex subset with the given number of rows and non-zero elements.
Example:

bool* frontier = newA(bool, n);
parallel_for(long i = 0; i < n; i++) frontier[i] = 1;
vertexSubset Frontier(n, n, frontier);
This creates a vertex subset that initially includes all vertices.
countCommon

Description: Counts the common neighbors between two vertices.
Parameters:
vertex& A: The first vertex.
vertex& B: The second vertex.
uintE a: The id of the first vertex.
uintE b: The id of the second vertex.
Example:

long common_neighbors = countCommon(V[s], V[d], s, d);
This counts the number of common neighbors between vertices s and d.