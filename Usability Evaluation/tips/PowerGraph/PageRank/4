Below are the detailed explanations of the main API functions used in this implementation, including parameter descriptions and simple usage examples.

1. test::command_line_options
Description: Parses command line options.

Constructor:

test::command_line_options(const std::string &description)
description: Description of the command line options group.
Common Methods:

void attach_option(const std::string &option_name, T &variable, const T &default_value, const std::string &description)
option_name: Name of the command line option.
variable: Variable corresponding to the option.
default_value: Default value for the option.
description: Description of the option.

bool parse(int argc, char **argv)
argc: Number of arguments.
argv: Argument values.
Usage Example:

test::command_line_options clopts("PageRank algorithm.");
std::string graph_dir;
clopts.attach_option("graph", graph_dir, "", "The graph file.");
if (!clopts.parse(argc, argv)) {
  std::cout << "Error parsing arguments." << std::endl;
  return EXIT_FAILURE;
}
2. test::distributed_graph
Description: Defines a distributed graph.

Template Parameters:

vertex_data_type: Type of vertex data.
edge_data_type: Type of edge data.
Constructor:

distributed_graph(test::distributed_control &dc, const test::command_line_options &clopts)
dc: Distributed control object.
clopts: Command line options.
Common Methods:

void load_format(const std::string &dir, const std::string &format)
dir: Directory containing the graph data.
format: Format of the graph data.

void finalize()
Ensures the graph is fully loaded and ready for computation.

void transform_vertices(void (*transformer)(vertex_type&))
transformer: Function to initialize or modify vertex data.

template<typename MapperType> ReductionType map_reduce_vertices(MapperType mapfunction)
mapfunction: Function to apply to each vertex for map-reduce operation.
Usage Example:

graph_type graph(dc, clopts);
graph.load_format(graph_dir, format);
graph.finalize();
graph.transform_vertices(init_vertex);
double total_rank = graph.map_reduce_vertices<double>(map_rank);
3. test::omni_engine
Description: Executes the distributed computation engine.

Template Parameters:

vertex_program_type: Type of the vertex program.
Constructor:

omni_engine(test::distributed_control &dc, graph_type &graph, const std::string &exec_type, const test::command_line_options &clopts)
dc: Distributed control object.
graph: The graph on which to run the engine.
exec_type: Type of execution (synchronous or asynchronous).
clopts: Command line options.
Common Methods:

void signal_all()
Signals all vertices to start computation.

void start()
Starts the engine.

double elapsed_seconds() const
Returns the elapsed time in seconds since the engine started.
Usage Example:

test::omni_engine<pagerank> engine(dc, graph, exec_type, clopts);
engine.signal_all();
engine.start();
const double runtime = engine.elapsed_seconds();
std::cout << "Finished running engine in " << runtime << " seconds." << std::endl;
4. test::ivertex_program
Description: Defines the vertex program for graph computation.

Template Parameters:

graph_type: Type of the graph.
gather_type: Type of data returned by the gather function.
Common Methods:


edge_dir_type gather_edges(icontext_type& context, const vertex_type& vertex) const
Specifies which edges to gather on (in edges, out edges, or all edges).

gather_type gather(icontext_type& context, const vertex_type& vertex, edge_type& edge) const
Gathers data from adjacent vertices or edges.

void apply(icontext_type& context, vertex_type& vertex, const gather_type& total)
Applies the gathered data to update the vertex.

edge_dir_type scatter_edges(icontext_type& context, const vertex_type& vertex) const
Specifies which edges to scatter on (in edges, out edges, or all edges).

void scatter(icontext_type& context, const vertex_type& vertex, edge_type& edge) const

Below is the pseudocode:

Function INIT_VERTEX(vertex):

vertex.data = 1
Return vertex
Function GATHER(context, vertex, edge):

Return edge.source.data / edge.source.num_out_edges
Function APPLY(context, vertex, total):

newval = (1.0 - RESET_PROB) * total + RESET_PROB
last_change = newval - vertex.data
vertex.data = newval
If ITERATIONS then context.signal(vertex)
Return vertex
Function SCATTER(context, vertex, edge):

If USE_DELTA_CACHE then context.post_delta(edge.target, last_change)
If fabs(last_change) > TOLERANCE then context.signal(edge.target)
Return vertex
Initialize all vertices:

graph.transform_vertices(INIT_VERTEX)
Create and configure engine:

engine = test.omni_engine<pagerank>(dc, graph, exec_type, clopts)
Signal all vertices to start computation:

engine.signal_all()
Start the engine:

engine.start()
Print runtime:

runtime = engine.elapsed_seconds()
Print "Finished running engine in runtime seconds."
Compute total rank:

total_rank = graph.map_reduce_vertices<double>(map_rank)
Print "Total rank: total_rank"
Save the final graph if needed:

If saveprefix != "" then graph.save(saveprefix, pagerank_writer, false, true, false)
Compute total PageRank:

totalpr = graph.map_reduce_vertices<double>(pagerank_sum)
Print "Totalpr = totalpr"
Finalize MPI:

test.mpi_tools.finalize()
Main Function:

Initialize MPI and distributed control
Parse command line options
Build and finalize the graph
Initialize vertex data
Run the engine
Print results
Save the final graph if needed
Compute total PageRank
Finalize MPI and exit
This pseudocode outlines the main structure and logic of the original C++ implementation using the test library for the PageRank algorithm.