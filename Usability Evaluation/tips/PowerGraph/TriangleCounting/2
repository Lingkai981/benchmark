Summary of test Distributed Graph Algorithms and Utility Classes
1. Async Consistent Engine (async_consistent_engine)
Overview: The asynchronous consistent engine executes vertex programs asynchronously while ensuring mutual exclusion, meaning adjacent vertices are never executed simultaneously. This can be relaxed to "factorized" consistency, where only individual gather/apply/scatter operations are guaranteed to be consistent, enhancing throughput.

Key API Functions:

Constructor:

async_consistent_engine(distributed_control &dc, graph_type &graph, const test_options &opts=test_options())
dc: Distributed control object for inter-thread coordination.
graph: The graph to run the engine on.
opts: Options for the engine.
void signal(vertex_id_type gvid, const message_type &message=message_type()):
Signals a specific vertex with an optional message.

void signal_all(const message_type &message=message_type(), const std::string &order="shuffle"):
Signals all vertices with an optional message and order.

bool add_vertex_aggregator(const std::string &key, VertexMapType map_function, FinalizerType finalize_function):
Creates a vertex aggregator.

bool add_edge_aggregator(const std::string &key, EdgeMapType map_function, FinalizerType finalize_function):
Creates an edge aggregator.

bool aggregate_now(const std::string &key):
Performs an immediate aggregation on a key.

template<typename ReductionType, typename VertexMapperType> ReductionType map_reduce_vertices(VertexMapperType mapfunction):
Performs a map-reduce operation on each vertex in the graph.

template<typename ReductionType, typename EdgeMapperType> ReductionType map_reduce_edges(EdgeMapperType mapfunction):
Performs a map-reduce operation on each edge in the graph.

template<typename VertexMapperType> void transform_vertices(VertexMapperType mapfunction):
Transforms each vertex in the graph.

template<typename EdgeMapperType> void transform_edges(EdgeMapperType mapfunction):
Transforms each edge in the graph.

2. test Utility Classes
Classes:

command_line_options: Parses command line options.
mutex, simple_spinlock, conditional: Synchronization primitives.
thread, thread_group, thread_pool: Thread management.
dense_bitset: Dense bitset implementation.
timer: Simple timer class.
Functions:

atomic_compare_and_swap: Performs an atomic compare-and-swap operation.
atomic_exchange: Atomically exchanges the values of two variables.
fetch_and_store: Atomically sets a variable to a new value, returning the old value.
get_local_ip, get_local_ip_as_str: Retrieves the local IP address.
get_free_tcp_port: Finds and binds a free TCP port.
3. test RPC
Classes:

async_consensus: Implements a distributed consensus algorithm.
distributed_control: Primary means of communication between distributed test processes.
Macros:

RPC_DEFAULT_NUMHANDLERTHREADS: Default number of handler threads.
RPC_DEFAULT_COMMTYPE: Default communication method (TCP).
RPC_MAX_N_PROCS: Maximum number of processes supported.
BUFFER_RELINQUISH_LIMIT: Size limit for buffer relinquishment.
Functions:

init_param_from_env: Initializes parameters from environment variables.
init_param_from_mpi: Initializes parameters from MPI.
4. Serialization
Classes:

iarchive, oarchive: Serialization input/output archive objects.
IS_POD_TYPE, gl_is_pod: Tests if a type is a POD type.
unsupported_serialize: Prevents serialization of derived classes.
Macros:

BEGIN_OUT_OF_PLACE_LOAD, BEGIN_OUT_OF_PLACE_SAVE: Defines out-of-place load/save macros.
test_UNSERIALIZABLE: Disables serialization of a type.
Functions:

serialize_iterator, deserialize_iterator: Serializes and deserializes iterator contents.
serialize_to_string, deserialize_from_string: Serializes an object to a string or deserializes an object from a string.
5. Metrics Reporting Webserver
Typedefs:

http_redirect_callback_type: Callback type for HTTP redirects.
Functions:

add_metric_server_callback: Maps a URL on the metrics server to a processing function.

page: The page to map.
callback: The processing function for the page.
launch_metric_server: Starts the metrics reporting server.

stop_metric_server: Stops the metrics reporting server if one is started.

stop_metric_server_on_eof: Waits for a Ctrl-D on machine 0 and stops the metrics reporting server if one is started.

6. Vertex Set
Class: vertex_set describes a set of vertices and supports union, intersection, and difference operations.

Key Methods:

get_lvid_bitset: Returns a reference to the underlying bitset.
set_lvid, set_lvid_unsync: Sets a local vertex ID.
make_explicit: Makes the internal representation explicit.
synchronize_master_to_mirrors, synchronize_mirrors_to_master_or: Synchronizes the master state with mirrors or vice versa.

