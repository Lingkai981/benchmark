Key API Functions
GraphLoader.edgeListFile
This function is used to load a graph from an edge list file.

Parameters:

sc: The Spark context.
path: The path to the edge list file.
canonicalOrientation (optional): If true, ensures that each edge is oriented from the smaller vertex ID to the larger vertex ID.
numEdgePartitions (optional): The number of edge partitions to create.
Example:


val graph = GraphLoader.edgeListFile(sc, "data/test/followers.txt", true)
Graph.partitionBy
This function is used to partition the graph according to a given strategy.

Parameters:

partitionStrategy: The strategy to use for partitioning the graph.
Example:


val partitionedGraph = graph.partitionBy(PartitionStrategy.RandomVertexCut)
Graph.triangleCount
This function computes the number of triangles passing through each vertex in the graph.

Returns: A new graph with vertex attributes containing the triangle count.

Example:


val triCounts = graph.triangleCount().vertices
RDD.join
This function joins two RDDs by their keys.

Parameters:
other: The other RDD to join with.
Example:

val users = sc.textFile("data/test/users.txt").map { line =>
  val fields = line.split(",")
  (fields(0).toLong, fields(1))
}
val triCountByUsername = users.join(triCounts)
RDD.map
This function applies a function to each element of the RDD.

Parameters:
f: The function to apply to each element.
Example:

val triCountByUsername = users.join(triCounts).map { case (id, (username, tc)) =>
  (username, tc)
}
RDD.collect
This function collects all elements of the RDD to the driver.

Returns: An array of the collected elements.

Example:


println(triCountByUsername.collect().mkString("\n"))

