Here are the main API functions used, including their purposes, parameters, and some usage examples.

1. template<typename T> T alloc_vertex_array()*
Purpose: Allocates memory for a vertex array.
Parameters: None.
Returns: Pointer to the allocated vertex array.
Usage Example:
Weight *distance = graph->alloc_vertex_array<Weight>();
2. VertexSubset alloc_vertex_subset()*
Purpose: Allocates memory for a vertex subset.
Parameters: None.
Returns: Pointer to the allocated vertex subset.
Usage Example:
VertexSubset *active_in = graph->alloc_vertex_subset();
3. template<typename T> void fill_vertex_array(T * array, T value)
Purpose: Fills a vertex array with a specific value.
Parameters:
T *array: Pointer to the vertex array.
T value: The value to fill the array with.
Usage Example:
graph->fill_vertex_array(distance, (Weight)1e9);
4. template<typename R, typename M> R process_edges(...)
Purpose: Processes edges using provided functions.
Parameters:
std::function<void(VertexId)> sparse_signal: Function to signal sparse processing.
std::function<R(VertexId, M, VertexAdjList<EdgeData>)> sparse_slot: Function to process each edge in sparse mode.
std::function<void(VertexId, VertexAdjList<EdgeData>)> dense_signal: Function to signal dense processing.
std::function<R(VertexId, M)> dense_slot: Function to process each edge in dense mode.
Bitmap *active: Bitmap indicating active vertices.
Bitmap *dense_selective (optional): Bitmap for dense selective processing.
Returns: Aggregated result of type R.
Usage Example:
active_vertices = graph->process_edges<VertexId, Weight>(
  sparse_signal_function,
  sparse_slot_function,
  dense_signal_function,
  dense_slot_function,
  active_in
);
5. void gather_vertex_array(T * array, int root)
Purpose: Gathers a vertex array from all partitions.
Parameters:
T *array: Pointer to the vertex array.
int root: Root process for gathering.
Usage Example:
graph->gather_vertex_array(distance, 0);
6. template<typename T> void dealloc_vertex_array(T * array)
Purpose: Deallocates memory for a vertex array.
Parameters:
T *array: Pointer to the vertex array.
Usage Example:
graph->dealloc_vertex_array(distance);
7. template<typename M> void emit(VertexId vtx, M msg)
Purpose: Emits a message to a vertex.
Parameters:
VertexId vtx: Target vertex ID.
M msg: Message to send.
Usage Example:
graph->emit(dst, msg);