
Here is a summary of the core API functions found in the provided code from the project "ligra.h"
1. edgeMapDense:

Parameters:
GA: The graph.
vertexSubset: The subset of vertices to process.
f: The function to apply to each edge.
fl: The flags for the operation.
Description: Applies the function f to the edges in a dense manner. Returns a new vertexSubsetData structure.

2. edgeMapDenseForward:

Parameters:
GA: The graph.
vertexSubset: The subset of vertices to process.
f: The function to apply to each edge.
fl: The flags for the operation.
Description: Similar to edgeMapDense but processes edges in a forward direction.
3. edgeMapSparse:

Parameters:
GA: The graph.
frontierVertices: The vertices at the frontier.
indices: Indices of the vertices.
degrees: Degrees of the vertices.
m: Number of vertices.
f: The function to apply to each edge.
fl: The flags for the operation.
Description: Applies the function f to the edges in a sparse manner. Returns a new vertexSubsetData structure.
4. edgeMapSparse_no_filter:

Parameters:
GA: The graph.
frontierVertices: The vertices at the frontier.
indices: Indices of the vertices.
offsets: Offsets for the edges.
m: Number of vertices.
f: The function to apply to each edge.
fl: The flags for the operation.
Description: Similar to edgeMapSparse but does not filter the edges.
5. edgeMapData:

Parameters:
GA: The graph.
vs: The vertex subset.
f: The function to apply to each edge.
threshold: Threshold for deciding between sparse and dense processing.
fl: The flags for the operation.
Description: Decides between using dense or sparse edge mapping based on the threshold and applies the function f to the edges.
6. edgeMap:

Parameters:
GA: The graph.
vs: The vertex subset.
f: The function to apply to each edge.
threshold: Threshold for deciding between sparse and dense processing.
fl: The flags for the operation.
Description: Simplified version of edgeMapData for regular edge mapping without additional data storage per vertex.
7. packEdges:

Parameters:
GA: The graph.
vs: The vertex subset.
p: The predicate function to filter edges.
fl: The flags for the operation.
Description: Packs the adjacency lists of all vertices in vs based on the predicate p.
8. edgeMapFilter:

Parameters:
GA: The graph.
vs: The vertex subset.
p: The predicate function to filter edges.
fl: The flags for the operation.
Description: Filters edges of the graph based on the predicate p. Optionally packs edges if specified by the flags.
9. vertexMap (two versions):

Parameters:
V: The vertex subset.
f: The function to apply to each vertex.
Description: Applies the function f to each vertex in V. There are two versions, one for general vertex subsets and another specifically for vertexSubset.
10. vertexFilter:

Parameters:
V: The vertex subset.
filter: The filtering function.
Description: Filters vertices in the subset V based on the filter function and returns a new vertexSubset.
11. vertexFilter2 (two versions):

Parameters:
V: The vertex subset or vertexSubsetData.
filter: The filtering function.
Description: Similar to vertexFilter but operates on both vertexSubset and vertexSubsetData.
12. Compute (two versions):

Parameters:
graph: The graph.
commandLine: The command line parameters.
Description: Template function to be implemented for specific graph computations.
13. parallel_main:

Parameters:
argc: Number of command line arguments.
argv: Array of command line arguments.
Description: Main function to run the parallel graph computations based on the command line inputs.