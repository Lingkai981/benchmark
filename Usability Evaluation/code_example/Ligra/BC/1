#include "test.h"
#include <vector>
#include <queue>
#include <limits>

using namespace std;

class BetweennessCentrality {
public:
    BetweennessCentrality(int n) : n(n), centrality(n, 0.0), sigma(n, 0), dist(n, -1), delta(n, 0.0) {}

    void compute(const vector<vector<int>>& graph) {
        for (int s = 0; s < n; ++s) {
            // BFS initialization
            fill(sigma.begin(), sigma.end(), 0);
            fill(dist.begin(), dist.end(), -1);
            fill(delta.begin(), delta.end(), 0.0);

            sigma[s] = 1;
            dist[s] = 0;

            queue<int> Q;
            Q.push(s);

            vector<vector<int>> pred(n);
            vector<int> stack;

            // BFS traversal
            while (!Q.empty()) {
                int v = Q.front();
                Q.pop();
                stack.push_back(v);

                for (int w : graph[v]) {
                    if (dist[w] < 0) { // w found for the first time
                        Q.push(w);
                        dist[w] = dist[v] + 1;
                    }

                    if (dist[w] == dist[v] + 1) { // shortest path to w via v?
                        sigma[w] += sigma[v];
                        pred[w].push_back(v);
                    }
                }
            }

            // Accumulation
            while (!stack.empty()) {
                int w = stack.back();
                stack.pop_back();

                for (int v : pred[w]) {
                    delta[v] += (sigma[v] / static_cast<double>(sigma[w])) * (1 + delta[w]);
                }

                if (w != s) {
                    centrality[w] += delta[w];
                }
            }
        }

        // Normalize the centrality values
        double scale = 1.0 / ((n - 1) * (n - 2));
        for (int i = 0; i < n; ++i) {
            centrality[i] *= scale;
        }
    }

    const vector<double>& getCentrality() const {
        return centrality;
    }

private:
    int n;
    vector<double> centrality;
    vector<int> sigma;
    vector<int> dist;
    vector<double> delta;
};

int main() {
    // Example usage
    int n = 5; // Number of nodes
    vector<vector<int>> graph = {
        {1, 2},      // Node 0 is connected to Node 1 and Node 2
        {0, 2, 3},   // Node 1 is connected to Node 0, Node 2 and Node 3
        {0, 1, 3, 4},// Node 2 is connected to Node 0, Node 1, Node 3 and Node 4
        {1, 2, 4},   // Node 3 is connected to Node 1, Node 2 and Node 4
        {2, 3}       // Node 4 is connected to Node 2 and Node 3
    };

    BetweennessCentrality bc(n);
    bc.compute(graph);

    const vector<double>& centrality = bc.getCentrality();
    for (int i = 0; i < n; ++i) {
        printf("Node %d: %f\n", i, centrality[i]);
    }

    return 0;
}
