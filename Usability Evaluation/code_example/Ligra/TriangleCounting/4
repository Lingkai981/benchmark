#include "test.h"
#include <iostream>
#include <tuple>

using namespace std;

struct countF {
    vertex* V;
    long* counts;
    countF(vertex* _V, long* _counts) : V(_V), counts(_counts) {}
    inline bool update(uintE s, uintE d) {
        if (s > d)
            writeAdd(&counts[s], countCommon<vertex>(V[s], V[d], s, d));
        return 1;
    }
    inline bool cond(uintE d) { return true; }
};

struct initF {
    vertex* V;
    long* counts;
    initF(vertex* _V, long* _counts) : V(_V), counts(_counts) {}
    inline bool operator()(uintE i) {
        counts[i] = 0;
        quickSort(V[i].getOutNeighbors(), V[i].getOutDegree(), intLT());
        return 1;
    }
};

template <class vertex>
long countCommon(vertex& A, vertex& B, uintE a, uintE b) {
    uintE i = 0, j = 0;
    uintE nA = A.getOutDegree(), nB = B.getOutDegree();
    uintE* nghA = A.getOutNeighbors();
    uintE* nghB = B.getOutNeighbors();
    long ans = 0;
    while (i < nA && j < nB) {
        if (nghA[i] == nghB[j]) {
            i++;
            j++;
            ans++;
        } else if (nghA[i] < nghB[j]) {
            i++;
        } else {
            j++;
        }
    }
    return ans;
}

void compute(graph<vertex>& GA) {
    long n = GA.n;
    long* counts = new long[n];
    bool* frontier = newA(bool, n);
    parallel_for(long i = 0; i < n; i++) frontier[i] = 1;
    vertexSubset Frontier(n, n, frontier);

    vertexMap(Frontier, initF(GA.V, counts));
    edgeMap(GA, Frontier, countF(GA.V, counts), -1, no_output);

    long count = sequence::plusReduce(counts, n);
    cout << "triangle count = " << count << endl;

    Frontier.del();
    free(counts);
}

int main() {
    // Load your graph GA here
    graph<vertex> GA = loadGraph("path_to_graph_file");
    compute(GA);
    return 0;
}
