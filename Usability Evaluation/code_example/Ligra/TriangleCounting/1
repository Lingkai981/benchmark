#include "test.h"

struct BFS {
  int *distances;
  BFS(int _n) {
    distances = new int[_n];
    for (int i = 0; i < _n; i++) distances[i] = -1;
  }

  inline bool update(uint32_t s, uint32_t d) {
    if (distances[d] == -1) {
      distances[d] = distances[s] + 1;
      return true;
    }
    return false;
  }

  inline bool cond(uint32_t d) {
    return distances[d] == -1;
  }
};

int main(int argc, char* argv[]) {
  // 从命令行读取图的输入文件
  if (argc != 2) {
    printf("Usage: %s <graph-file>\n", argv[0]);
    return -1;
  }

  // 读取图数据
  graph<int> G = readGraphFromFile(argv[1]);
  uint32_t source = 0;  // BFS的起点

  BFS bfs(G.n);
  bfs.distances[source] = 0;

  vertexSubset Frontier = vertexSubset(source);
  while (Frontier.size() > 0) {
    vertexSubset output = edgeMap(G, Frontier, bfs);
    Frontier.del();
    Frontier = output;
  }

  // 输出距离
  for (int i = 0; i < G.n; i++) {
    printf("Node %d has distance %d\n", i, bfs.distances[i]);
  }

  delete[] bfs.distances;
  return 0;
}