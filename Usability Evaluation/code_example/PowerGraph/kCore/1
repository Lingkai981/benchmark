
#include <test.hpp>
#include <graphlab.hpp>

// Define the vertex data type
struct vertex_data {
    int degree;
    bool active;
    vertex_data() : degree(0), active(true) {}
};

// Define the edge data type
typedef graphlab::empty edge_data;

// Define the graph type
typedef graphlab::distributed_graph<vertex_data, edge_data> graph_type;

// Update function to calculate the degree of each vertex
void calculate_degree(graph_type::vertex_type& vertex) {
    vertex.data().degree = vertex.num_in_edges() + vertex.num_out_edges();
}

// Update function to check if a vertex should be removed
void check_vertex(graph_type::vertex_type& vertex) {
    if (vertex.data().degree < k) {
        vertex.data().active = false;
        // Send messages to neighbors to update their degree
        vertex.broadcast_signal();
    }
}

// Update function to update the degree of neighbors
void update_neighbor_degree(graph_type::vertex_type& vertex) {
    if (!vertex.data().active) {
        return;
    }
    int new_degree = 0;
    for (auto edge : vertex.in_edges()) {
        if (edge.source().data().active) {
            new_degree++;
        }
    }
    for (auto edge : vertex.out_edges()) {
        if (edge.target().data().active) {
            new_degree++;
        }
    }
    vertex.data().degree = new_degree;
    if (new_degree < k) {
        vertex.data().active = false;
        vertex.broadcast_signal();
    }
}

int main(int argc, char** argv) {
    // Initialize control plain using mpi
    graphlab::mpi_tools::init(argc, argv);
    graphlab::distributed_control dc;

    // Parse command line options
    graphlab::command_line_options clopts("k-Core Algorithm");
    std::string graph_dir;
    clopts.attach_option("graph", graph_dir, "The graph file. Required.");
    int k = 2;
    clopts.attach_option("k", k, "The k value for k-Core. Default is 2.");
    if (!clopts.parse(argc, argv)) {
        dc.cout() << "Error in parsing command line arguments." << std::endl;
        return EXIT_FAILURE;
    }

    // Load the graph
    graph_type graph(dc, clopts);
    graph.load(graph_dir, graphlab::graph_loader::edge_list_loader);
    graph.finalize();

    // Initialize vertex data
    graph.transform_vertices(calculate_degree);

    // Run the k-Core algorithm
    graphlab::omni_engine<check_vertex> engine(dc, graph, "sync");
    engine.signal_all();
    engine.start();

    // Save the result
    graph.save("kcore_output", graphlab::vertex_writer());

    // Finalize control plain
    graphlab::mpi_tools::finalize();
    return EXIT_SUCCESS;
}