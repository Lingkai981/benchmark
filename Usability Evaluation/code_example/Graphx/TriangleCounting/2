
object TriangleCountingExample {
  def main(args: Array[String]): Unit = {
    // Initialize Spark Context
    val conf = new SparkConf().setAppName("Triangle Counting").setMaster("local[*]")
    val sc = new SparkContext(conf)

    // Define the vertices and edges
    val users: RDD[(VertexId, (String, String))] = sc.parallelize(Seq(
      (3L, ("rxin", "student")),
      (7L, ("jgonzal", "postdoc")),
      (5L, ("franklin", "prof")),
      (2L, ("istoica", "prof"))
    ))

    val relationships: RDD[Edge[String]] = sc.parallelize(Seq(
      Edge(3L, 7L, "collab"),
      Edge(5L, 3L, "advisor"),
      Edge(2L, 5L, "colleague"),
      Edge(5L, 7L, "pi")
    ))

    val defaultUser = ("John Doe", "Missing")

    // Create the graph
    val graph = Graph(users, relationships, defaultUser)

    // Run the Triangle Count algorithm
    val triCounts = graph.triangleCount().vertices

    // Display the results
    println("Triangle counts:")
    triCounts.collect().foreach { case (vertexId, count) =>
      println(s"Vertex $vertexId is part of $count triangles.")
    }

    // Stop the Spark Context
    sc.stop()
  }
}