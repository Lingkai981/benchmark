
object PageRankExample {
  def main(args: Array[String]): Unit = {
    // Initialize SparkContext
    val conf = new SparkConf().setAppName("PageRankExample").setMaster("local[*]")
    val sc = new SparkContext(conf)

    // Define the vertices
    val users: RDD[(VertexId, (String, String))] = sc.parallelize(Seq(
      (3L, ("rxin", "student")),
      (7L, ("jgonzal", "postdoc")),
      (5L, ("franklin", "prof")),
      (2L, ("istoica", "prof"))
    ))

    // Define the edges
    val relationships: RDD[Edge[String]] = sc.parallelize(Seq(
      Edge(3L, 7L, "collab"),
      Edge(5L, 3L, "advisor"),
      Edge(2L, 5L, "colleague"),
      Edge(5L, 7L, "pi")
    ))

    // Define a default user in case there are relationships with missing user
    val defaultUser = ("John Doe", "Missing")

    // Build the initial Graph
    val graph = Graph(users, relationships, defaultUser)

    // Run PageRank
    val ranks = graph.pageRank(0.0001).vertices

    // Print the result
    ranks.collect().foreach { case (id, rank) =>
      println(s"Vertex $id has rank $rank.")
    }

    // Stop the SparkContext
    sc.stop()
  }
}