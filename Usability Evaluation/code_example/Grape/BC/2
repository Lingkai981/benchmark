Summary of Core API Functions and Classes in GRAPE
1. Context Classes
These classes manage the context in which graph processing occurs, holding necessary data and state.

VoidContext

class VoidContext : public ContextBase {};
Purpose: A minimal context that does not hold any data.
VertexDataContext

template <typename FRAG_T, typename DATA_T>
class VertexDataContext : public ContextBase {
public:
  using fragment_t = FRAG_T;
  using data_t = DATA_T;
  
  void Init(FRAG_T& frag, parallel_engine_t& engine, message_manager_t& messages) override;
  void Finalize() override;

  vertex_data_t data_;
};
Functions:
Init(FRAG_T& frag, parallel_engine_t& engine, message_manager_t& messages)
Parameters: frag (fragment), engine (parallel engine), messages (message manager)
Purpose: Initializes the context.
Finalize()
Purpose: Cleans up the context.
MutationContext

template <typename FRAG_T, typename DATA_T>
class MutationContext : public ContextBase {
public:
  using fragment_t = FRAG_T;
  using data_t = DATA_T;

  void Init(FRAG_T& frag, parallel_engine_t& engine, message_manager_t& messages) override;
  void Finalize() override;

  vertex_data_t data_;
};
Functions:
Init(FRAG_T& frag, parallel_engine_t& engine, message_manager_t& messages)
Parameters: frag (fragment), engine (parallel engine), messages (message manager)
Purpose: Initializes the context.
Finalize()
Purpose: Cleans up the context.
ContextBase

class ContextBase {
public:
  virtual void Init() = 0;
  virtual void Finalize() = 0;
};
Functions:
Init()
Purpose: Abstract initialization function.
Finalize()
Purpose: Abstract cleanup function.
2. Application Base Classes
These classes serve as the foundation for different types of parallel applications.

ParallelAppBase

template <typename APP_T>
class ParallelAppBase : public AppBase<APP_T> {
public:
  void PEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages) override;
  void IncEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages) override;
};
Functions:
PEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages)
Parameters: frag (fragment), ctx (context), messages (message manager)
Purpose: Performs the initial parallel evaluation.
IncEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages)
Parameters: frag (fragment), ctx (context), messages (message manager)
Purpose: Performs incremental parallel evaluation.
BatchShuffleAppBase

template <typename APP_T>
class BatchShuffleAppBase : public AppBase<APP_T> {
public:
  void PEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages) override;
  void IncEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages) override;
};
Functions:
PEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages)
Parameters: frag (fragment), ctx (context), messages (message manager)
Purpose: Performs the initial evaluation in a batch shuffle manner.
IncEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages)
Parameters: frag (fragment), ctx (context), messages (message manager)
Purpose: Performs incremental evaluation in a batch shuffle manner.
AutoAppBase

template <typename APP_T>
class AutoAppBase : public AppBase<APP_T> {
public:
  void PEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages) override;
  void IncEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages) override;
};
Functions:
PEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages)
Parameters: frag (fragment), ctx (context), messages (message manager)
Purpose: Automatically performs the initial evaluation.
IncEval(const fragment_t& frag, context_t& ctx, message_manager_t& messages)
Parameters: frag (fragment), ctx (context), messages (message manager)
Purpose: Automatically performs incremental evaluation.
3. Message Managers
These classes handle the communication between different parts of the parallel computation.

DefaultMessageManager

class DefaultMessageManager : public MessageManager {
public:
  void InitChannels(thread_num_t thread_num);
  void Start();
  void Stop();
};
Functions:
InitChannels(thread_num_t thread_num)
Parameters: thread_num (number of threads)
Purpose: Initializes the message channels.
Start()
Purpose: Starts the message manager.
Stop()
Purpose: Stops the message manager.
BatchShuffleMessageManager

class BatchShuffleMessageManager : public MessageManager {
public:
  void InitChannels(thread_num_t thread_num);
  void Start();
  void Stop();
};
Functions:
InitChannels(thread_num_t thread_num)
Parameters: thread_num (number of threads)
Purpose: Initializes the message channels.
Start()
Purpose: Starts the message manager.
Stop()
Purpose: Stops the message manager.
AutoParallelMessageManager

class AutoParallelMessageManager : public MessageManager {
public:
  void InitChannels(thread_num_t thread_num);
  void Start();
  void Stop();
};
Functions:
InitChannels(thread_num_t thread_num)
Parameters: thread_num (number of threads)
Purpose: Initializes the message channels.
Start()
Purpose: Starts the message manager.
Stop()
Purpose: Stops the message manager.
ParallelMessageManager

class ParallelMessageManager : public MessageManager {
public:
  void InitChannels(thread_num_t thread_num);
  void Start();
  void Stop();
};
Functions:
InitChannels(thread_num_t thread_num)
Parameters: thread_num (number of threads)
Purpose: Initializes the message channels.
Start()
Purpose: Starts the message manager.
Stop()
Purpose: Stops the message manager.
4. Utility and Worker Classes
These classes provide additional functionalities and manage parallel worker threads.

Atomic Operations (atomic_ops.h)

Purpose: Provides atomic operations to ensure thread safety in parallel processing.
VertexArray

template <typename T>
class VertexArray {
public:
  void Init(size_t size);
  T& operator[](size_t index);
};
Functions:
Init(size_t size)
Parameters: size (size of the array)
Purpose: Initializes the vertex array.
operator[](size_t index)
Parameters: index (index in the array)
Purpose: Accesses the element at the specified index.
VertexSet

class VertexSet {
public:
  void Add(vertex_t v);
  bool Contains(vertex_t v);
};
Functions:
Add(vertex_t v)
Parameters: v (vertex)
Purpose: Adds a vertex to the set.
Contains(vertex_t v)
Parameters: v (vertex)
Purpose: Checks if the vertex is in the set.
Worker

class Worker {
public:
  void Start();
  void Stop();
};
Functions:
Start()
Purpose: Starts the worker thread.
Stop()
Purpose: Stops the worker thread.