#include "../core/api.h"

using namespace std;

// Define mapping functions
DefineMapV(INIT, v) {
    v.d = deg(v);
    return v;
}

DefineFV(FILTER, v) {
    return v.d < k;
}

DefineMapV(LOCAL, v) {
    v.c = 0;
    return v;
}

DefineFV(CHECK, v) {
    return v.d >= k;
}

DefineMapE(UPDATE1, s, d) {
    d.c++;
    return d;
}

DefineMapE(UPDATE2, s, d) {
    d.d -= s.c;
    return d;
}

int main(int argc, char* argv[]) {
    // Ensure valid number of arguments are provided
    if (argc < 4) {
        printf("Usage: %s <input-graph> <output-graph> <k>\n", argv[0]);
        return 1;
    }

    // Initialize dataset
    SetDataset(argv[1], argv[2]);

    // Convert input argument for k
    int k = atoi(argv[3]);

    // Initialize all vertices
    vertexSubset A = VERTEXMAP(All, CTrueV, INIT);

    // Measure total processing time
    double t = GetTime();

    // Repeat until size of A is zero
    for (int i = 0, len = Size(A); len > 0; ++i) {
        // Print the current round number and size of A
        printf("Round %d: %d vertices\n", i, len);

        // Apply vertex map and edge map transformations
        A = VERTEXMAP(A, FILTER, LOCAL);
        A = EDGEMAPSPARSE(A, EU, CTrueE, UPDATE1, CHECK, UPDATE2);
        len = Size(A);
    }

    // Measure total processing time
    t = GetTime() - t;

    // Get the size of the remaining vertices
    int s = Size(VERTEXMAP(All, CHECK));

    // Print results
    printf("k-core size: %d\n", s);
    printf("Processing time: %lf seconds\n", t);

    return 0;
}