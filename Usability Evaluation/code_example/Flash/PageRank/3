#include "../core/api.h"

DefineMapV(initialize) {
    v.value = 1.0 / n_vertex; // Initial value for PageRank
    v.next = 0.0;
    v.deg = deg(v); // Degree of the vertex
};

DefineMapE(accumulate) {
    d.next += 0.85 * s.value / s.deg; // Accumulate PageRank contributions
};

DefineMapV(update) {
    v.next += 0.15 / n_vertex; // Add the teleportation factor
    v.value = v.next;
    v.next = 0.0; // Reset for the next iteration
};

void PageRank(Graph<VTYPE> &G, int iterations) {
    // Step 1: Initialize the vertex values
    vertexMap(All, CTrueV, initialize);

    // Step 2: Iterate to compute PageRank
    for (int i = 0; i < iterations; i++) {
        edgeMapDenseFunction(G, AllEdges, CTrueE, accumulate, CTrueV);

        // Gather results after edge processing
        Gather([](VType &v) {
            update(v);
        });
    }
}

int main(int argc, char* argv[]) {
    MPI_Init(&argc, &argv);

    if (argc < 2) {
        printf("Usage: %s <graph_file> [iterations]\n", argv[0]);
        MPI_Finalize();
        return 1;
    }

    Graph<VTYPE> G;
    G.Load(argv[1]);

    int iterations = (argc >= 3) ? atoi(argv[2]) : 10; // Default to 10 iterations if not specified
    PageRank(G, iterations);

    MPI_Finalize();
    return 0;
}