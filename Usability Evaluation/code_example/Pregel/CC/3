Main API Functions
1. send_message
Sends a message to a specific vertex.

Prototype:

void send_message(const KeyT& id, const MessageT& msg);
Parameters:

id: The ID of the vertex receiving the message.
msg: The content of the message being sent.
Usage Example:

send_message(nbs[i], msg);
Used in the bcast_to_in_nbs function to send a message to all incoming neighbors.

2. vote_to_halt
Marks the vertex as inactive.

Prototype:

void vote_to_halt();
Parameters:
None.

Usage Example:

vote_to_halt();
Called in the compute function to indicate that the vertex will not participate in further computation.

3. step_num
Gets the current superstep number.

Prototype:

int step_num() const;
Parameters:
None.

Usage Example:

if (step_num() == 1) {
    // Logic for the initial superstep
}
Checks if the current superstep is the first one in the compute function.

4. value
Gets or sets the value of the vertex.

Prototype:

ValueT& value();
const ValueT& value() const;
Parameters:
None.

Usage Example:

OWCTYValue_scc& val = value();
Used in the compute function to access the vertex's value for operations.

5. add_vertex
Adds a new vertex.

Prototype:

void add_vertex(VertexT* v);
Parameters:

v: Pointer to the new vertex.
Usage Example:

v->value().in_edges.push_back(atoi(pch));
In the toVertex function, it parses input data and adds incoming edges.

6. run
Runs the Pregel job.

Prototype:

void run(const WorkerParams& params);
Parameters:

params: A structure containing input path, output path, force write flag, and other parameters.
Usage Example:

WorkerParams param;
param.input_path = in_path;
param.output_path = out_path;
param.force_write = true;
param.native_dispatcher = false;
worker.run(param);
In the pregel_owcty function, it configures parameters and runs the job.
