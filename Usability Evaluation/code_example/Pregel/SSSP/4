Key Classes and Functions
Vertex Class

compute(MessageContainer & messages): This is a virtual function that users must override to define the behavior of a vertex when it processes messages.
virtual void compute(MessageContainer & messages) {
    // User-defined computation logic
}
Worker Class

*toVertex(char line)**: Converts a line from the input file to a vertex object. Users must override this function to define how input lines are parsed into vertices.
virtual SPVertex_pregel* toVertex(char* line) {
    // User-defined vertex creation logic
}
*toline(SPVertex_pregel v, BufferedWriter & writer)**: Converts a vertex object to an output line. Users must override this function to define how vertices are serialized for output.
virtual void toline(SPVertex_pregel* v, BufferedWriter & writer) {
    // User-defined output logic
}
Combiner Class

combine(SPMsg_pregel & old, const SPMsg_pregel & new_msg): Combines two messages into one. Users must override this function to define the logic for combining messages.
virtual void combine(SPMsg_pregel & old, const SPMsg_pregel & new_msg) {
    // User-defined combining logic
}
send_message(const KeyT & id, const MessageT & msg): Sends a message to another vertex.

void send_message(const KeyT & id, const MessageT & msg);
vote_to_halt(): Marks the vertex as inactive for the next superstep unless it receives a message.

void vote_to_halt();

Here is the pseudo-code for the provided C++ implementation of the single-source shortest path (SSSP) algorithm using Pregel+:

Function INIT(v):

Initialize the vertex v:
v.dist = DBL_MAX
v.from = -1
If v.id == src then v.dist = 0
Return v
Function BROADCAST(v):

For each edge e in v.edges:
Create a message msg:
msg.dist = v.dist + e.len
msg.from = v.id
Send msg to vertex e.nb
Function COMPUTE(v, messages):

If step_num == 1:
If v.id == src:
v.dist = 0
v.from = -1
Call BROADCAST(v)
Else:
v.dist = DBL_MAX
v.from = -1
Else:
Initialize min_msg with DBL_MAX
For each message msg in messages:
If msg.dist < min_msg.dist then min_msg = msg
If min_msg.dist < v.dist:
v.dist = min_msg.dist
v.from = min_msg.from
Call BROADCAST(v)
Call vote_to_halt(v)
Function LOAD_VERTEX(line):

Parse line to extract id and edges
Initialize a vertex v:
v.id = id
v.from = -1
If v.id == src then v.dist = 0
Else v.dist = DBL_MAX and call vote_to_halt(v)
For each edge in edges:
Add edge to v.edges
Return v
Function TO_LINE(v):

If v.dist != DBL_MAX then return v.id, v.dist, v.from
Else return v.id, unreachable
Function COMBINE(old_msg, new_msg):

If new_msg.dist < old_msg.dist then old_msg = new_msg
Return old_msg
Function PREGEL_SSSP(srcID, input_path, output_path, use_combiner):

Set global src = srcID
Initialize WorkerParams param with input_path and output_path
Create SPWorker_pregel worker
If use_combiner:
Create SPCombiner_pregel combiner
Set worker.combiner = combiner
Call worker.run(param)
Main Execution Flow:
Initialize all vertices:

For each vertex v in the input graph:
Call LOAD_VERTEX(line)
For 10 iterations (supersteps):

Print the current round number
Apply edge map to distribute values:
For each edge e in the graph:
Call COMPUTE(v, messages)
Apply vertex map to update vertex values:
For each vertex v:
Call COMPUTE(v, messages)
Gather results:

Initialize max_val = -1 and total_value = 0
For each vertex v:
If v.val > max_val then max_val = v.val
total_value += v.val
Measure total processing time:

processing_time = GetTime()
Print results:

Print max_val, total_value, and processing_time